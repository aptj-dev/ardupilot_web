c
params
c
params.require(:registration).permit(:name, :email, :password, :password_confirmation)
params.require(:registration).permit(:registration)
params
c
params.require(:registration).permit(:name, :email, :password, :password_confirmation)
params
c
DeviseTokenAuth::ApplicationController.params_for_resource()c
DeviseTokenAuth::ApplicationController.params_for_resource
DeviseTokenAuth::ApplicationController.params_for_resource(user)
DeviseTokenAuth::ApplicationController.devise_parameter_sanitizer
]
devise_parameter_sanitizer.instance_values['permitted'][resource]
ctrl.sign_up_params
ctrl = DeviseTokenAuth::RegistrationsController.new
DeviseTokenAuth::RegistrationsController.sign_up_params
@ressource
DeviseTokenAuth::RegistrationsController.methods[:action]
DeviseTokenAuth::RegistrationsController.methods.action
DeviseTokenAuth::RegistrationsController.methods[:action]
DeviseTokenAuth::RegistrationsController.methods
DeviseTokenAuth::RegistrationsController.method?
DeviseTokenAuth::RegistrationsController.method
DeviseTokenAuth::RegistrationsController.create
DeviseTokenAuth::RegistrationsController
DeviseTokenAuth::RegistrationController
DeviseTokenAuth#RegistrationController.create
DeviseTokenAuth#RegistrationController
DeviseTokenAuth#Registration
DeviseTokenAuth#Registrations
DeviseTokenAuth#Constants
DeviseTokenAuth::Registration
DeviseTokenAuth.controller
DeviseTokenAuth.inspect
DeviseTokenAuth::
DeviseTokenAuth::RegistrationController
Devise_Token_Auth::RegistrationController
Devise_Token_Auth::Registration
Devise_Token_Auth
Devise_Token_Auth::Registration.create
params
c
params
params.permit(:user)
params.permit(:registration)
params.permit(:sign_up)
devise_parameter_sanitizer.permit(:sign_up, keys: [:name])
params.permit(:sign_up)
params.permit(:registration)
params.permit(:user)
params.required?
params.required
c
params["name"]
devise_parameter_sanitizer.permit(:sign_up, keys: [:name])
params
c
params
c
params.registration
params.permitted?
params
c
q
User.create({"name"=>"pipi", "email"=>"pipi@example.jp", "password"=>"tototata", "password_confirmation"=>"tototata"})
params
DeviseTokenAuth::RegistrationsController.sign_up
DeviseTokenAuth::RegistrationsController.methods.public_methods
DeviseTokenAuth::RegistrationsController.create
DeviseTokenAuth::RegistrationsController.methods
DeviseTokenAuth::RegistrationsController.method
DeviseTokenAuth::RegistrationsController.method?
DeviseTokenAuth::RegistrationsController.sign_up
DeviseTokenAuth::RegistrationsController
devise_controller?
@controller
c
params
devise_parameter_sanitizer.permit
devise_parameter_sanitizer.permit(:sign_up)
devise_parameter_sanitizer.permit(:sign_up, keys: [:name])
params.permitted?
params.permitted
params
c
devise_parameter_sanitizer
@controller
controller_path
controller
c
params
c
params
c
params
c
params
c
params
c
params
c
params
c
cc
params
c
params
c
params
c
params
c
params
drone_params
params
c
params
c
params
c
params
c
params
c
params
c
drone_params
params
c
params
c
params
c
devise_parameter_sanitizer
devise_parameter_sanitizer.permit(:registration)
devise_parameter_sanitizer.permit(:user)
devise_parameter_sanitizer.permit(:user, :registration)
params.permit(:user, :registration)
params.permit
params
User.create!({"user"=>{"name"=>"pipi", "email"=>"pipi@example.jp", "password"=>"tototata", "password_confirmation"=>"totata"}, "controller"=>"devise_token_auth/registrations", "action"=>"create", "registration"=>{"user"=>{"name"=>"pipi", "email"=>"pipi@example.jp", "password"=>"tototata", "password_confirmation"=>"totata"}}})
User.create({"user"=>{"name"=>"pipi", "email"=>"pipi@example.jp", "password"=>"tototata", "password_confirmation"=>"totata"}, "controller"=>"devise_token_auth/registrations", "action"=>"create", "registration"=>{"user"=>{"name"=>"pipi", "email"=>"pipi@example.jp", "password"=>"tototata", "password_confirmation"=>"totata"}}})
params
c
quit
request.type
request.params
request.headers
clear
request.headers
request
c
user.save
user
user = User.new(user_params)
user = User.create(user_params)
user = User.create({ name: "toto"})
user = User.create({ name: "toto"}})
user = User.create!({user: { name: "toto"}})
user = User.create!({name: "toto"})
user = User.create!("totot")
user = User.create!
user = User.create!(user_params)
user_params
c
user.id.nil?
user.id
user
q
user_params
user.inspect
user
c
params
create_params
c
user_params
params
c
params
user_params
c
[Ac
user_params
c
params
c
user
params
c
response
c
q
JSON.parse(response)
response.to_json
response
c
response
c
response
c
user
c
response
params
c
quit
c
response
c
format.json
format
response.headers = 200
response.header = 200
response.header
response.head
response.headers
response.json
response.format.json
c
q
response
c
params
q
continue
render :json
@drone
c
response
c
format.json
format
response.headers = 200
response.header = 200
response.header
response.head
response.headers
response.json
response.format.json
c
q
response
c
params
q
continue
